{
  "hash": "471e35a8842ef39cf6ed7e4b4b4a6145",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Managing Hanging R Code\ndescription: \"How to handle hanging R code using background processes.\"\nauthor: \"Robert J.Bischoff\"\ndate: \"07/23/2024\"\ncategories: \n  - R\n  - tutorial\ndraft: true\n---\n\n\nI came across an intriguing/frustrating problem while conducting network analysis in R. The basic problem was that my code was hanging and I could find no way to completely avoid it. This post describes how I was able to solve the problem. Before continuing, I want to note that typically hanging code is a user error or sign of a bug, and it is best to solve the problem rather than brute force a solution. However, in some cases, you may need to run code that could hang and you want to stop it after a certain amount of time. This post describes how to do that.\n\n![Hanging Code](HangingCode.png)\n\nI wanted to run an Exponential Random Graph Model (ERGM) on a list of graphs. The problem was that the *ergm* function would hang on some graphs, and I couldn't find a way to stop the code from running other than manually terminating it. This wouldn't be a huge problem, if I wasn't running the code for several thousand graphs. My first thought was to try a different package or maybe even do it in Python, but it turns out this is the only package that can calculate an ERGM and it isn't available in Python. I also discovered that it was a known issue that the *ergm* function can hang under certain conditions.\n\nThe solution to the problem is found in the *callr* package. This package allows the user to create background R processes that can be supervised. The length of the background process can be monitored and it can be terminated if it exceeds that time frame. This solved my problem and saved me from manually running the code for each graph. \n\nBelow is example code demonstrating my process.\n\nFirst, we'll create a list of example graphs. We can create a graph like this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1010)\nlibrary(statnet)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tergm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ergm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: network\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'network' 1.18.2 (2023-12-04), part of the Statnet Project\n* 'news(package=\"network\")' for changes since last version\n* 'citation(\"network\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'ergm' 4.6.0 (2023-12-17), part of the Statnet Project\n* 'news(package=\"ergm\")' for changes since last version\n* 'citation(\"ergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n'ergm' 4 is a major update that introduces some backwards-incompatible\nchanges. Please type 'news(package=\"ergm\")' for a list of major\nchanges.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: networkDynamic\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'networkDynamic' 0.11.4 (2023-12-10?), part of the Statnet Project\n* 'news(package=\"networkDynamic\")' for changes since last version\n* 'citation(\"networkDynamic\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'tergm':\n  method                   from\n  simulate_formula.network ergm\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'tergm' 4.2.0 (2023-05-30), part of the Statnet Project\n* 'news(package=\"tergm\")' for changes since last version\n* 'citation(\"tergm\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'tergm'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ergm':\n\n    snctrl\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: ergm.count\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'ergm.count' 4.1.2 (2024-06-15), part of the Statnet Project\n* 'news(package=\"ergm.count\")' for changes since last version\n* 'citation(\"ergm.count\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: sna\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: statnet.common\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'statnet.common'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:ergm':\n\n    snctrl\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    attr, order\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nsna: Tools for Social Network Analysis\nVersion 2.7-2 created on 2023-12-05.\ncopyright (c) 2005, Carter T. Butts, University of California-Irvine\n For citation information, type citation(\"sna\").\n Type help(package=\"sna\") to get started.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tsna\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n'statnet' 2019.6 (2019-06-13), part of the Statnet Project\n* 'news(package=\"statnet\")' for changes since last version\n* 'citation(\"statnet\")' for citation information\n* 'https://statnet.org' for help, support, and other information\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nunable to reach CRAN\n```\n\n\n:::\n\n```{.r .cell-code}\ng <- network(rgraph(20, tprob = 0.1))\nplot(g)\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nWe'll use the *lapply* function to make a list of graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphs <- lapply(1:10, function(x) network(rgraph(20, tprob = 0.1)))\nnames(graphs) <- letters[1:10]\n```\n:::\n\n\nNow we have graphs we can use with the *ergm* function. For simplicity, we'll use a for loop to calculate the ergm for each graph. I've commented out the below code, because it will hang the R session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # don't run\n# for (graph in graphs){\n#   ergm(graph ~ edges + triangles)\n# }\n```\n:::\n\n\nHow do we handle this? Error handling like *try* or *tryCatch* won't work because the R session is hanging not providing an error. What I want to do is stop the code from running if it takes longer than a certain time. We can do this by running the code in a background process. We can use the *r_bg()* function from the *callr* package. We can specify the time limit for the process to run. If the process takes longer than the time limit, the process will be killed.\n\nTo do this, we'll need to create a function to supervise the background process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrun_and_monitor_processes <- function(bg, timeout = 15) {\n  start_times <- Sys.time()\n  \n  # Monitor processes\n  while (TRUE) {\n    Sys.sleep(1)  # Check every second\n    \n    # Check the status of each process\n    for (name in names(bg)) {\n      if (bg[[name]]$is_alive()) {\n        run_time <- as.numeric(difftime(Sys.time(), start_times, units = \"secs\"))\n        if (shiny::isTruthy(run_time > timeout)) {\n          bg[[name]]$kill()  # Kill process if it exceeds timeout\n          cat(\"Process\", name, \"killed after\", run_time, \"seconds\\n\")\n        }\n      }\n    }\n    \n    # Exit the loop if all processes are done\n    if (all(!sapply(bg, function(p) p$is_alive()))) {\n      break\n    }\n  }\n}\n```\n:::\n\n\nThis function checks how long a process has been running and kills it if it exceeds the specified timeout. Once all processes are done, the function exits.\n\nWe also need to create a function to run the ERGM so we can pass in the arguments and load the *statnet* package. We are creating a separate background process that does not have access to the global environment. Results can be obtained from the background process using the *get_result()* function, but I find it safer when running longer code to just write the results to a file. This way the results are saved even if R crashes or something else interrupts the code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp_dir = tempdir()\nrun_ergm <- function(graph, dir, i){\n  library(statnet)\n  ergm(graph ~ edges + triangles)\n  writeLines(\"Done\", file.path(dir, paste0(\"done-\",i,\".txt\")))\n  return(\"Done\")\n}\n```\n:::\n\n\nNow we can run our *run_ergm* function for each graph without the process hanging. An additional advantage is that we are running the code in parallel, which can speed up the process.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(callr)\nbg <<- list() # create a global list to store the background processes\nfor (i in 1:length(graphs)){\n  graph <- graphs[[i]]\n  nm <- names(graphs)[i]\n  bg[[nm]] <- r_bg(run_ergm, args = list(graph = graph, dir = tmp_dir, i = i))\n}\nrun_and_monitor_processes(bg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProcess b killed after 15.21355 seconds\nProcess h killed after 15.28757 seconds\nProcess i killed after 15.34911 seconds\nProcess j killed after 15.42225 seconds\n```\n\n\n:::\n\n```{.r .cell-code}\n# get results\nsapply(bg, function(p) tryCatch(p$get_result(),error = function(e) return(NA)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     a      b      c      d      e      f      g      h      i      j \n\"Done\"     NA \"Done\" \"Done\" \"Done\" \"Done\" \"Done\"     NA     NA     NA \n```\n\n\n:::\n\n```{.r .cell-code}\n# view saved results\nls <- list.files(tmp_dir, pattern = \"done\", full.names = TRUE)\nprint(sapply(ls,readLines))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-1.txt \n                                                          \"Done\" \nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-3.txt \n                                                          \"Done\" \nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-4.txt \n                                                          \"Done\" \nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-5.txt \n                                                          \"Done\" \nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-6.txt \n                                                          \"Done\" \nC:\\\\Users\\\\rjbischo\\\\AppData\\\\Local\\\\Temp\\\\Rtmp6dGUPg/done-7.txt \n                                                          \"Done\" \n```\n\n\n:::\n:::\n\n\nThe results show that the code was able to run the ERGM for each graph without hanging, although we did not get results for two of the graphs because they timed out. Obviously, in a real use case we would want to return real results, but this simple example should allow you to adapt your code to solve hanging code problems.",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}