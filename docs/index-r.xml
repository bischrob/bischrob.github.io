<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Robert J. Bischoff</title>
<link>https://bischrob.github.io/#category=R</link>
<atom:link href="https://bischrob.github.io/index-r.xml" rel="self" type="application/rss+xml"/>
<description>Robert J. Bischoff&#39;s personal website and blog containing posts on archaeology, R, and data science.</description>
<generator>quarto-1.4.555</generator>
<lastBuildDate>Tue, 23 Jul 2024 07:00:00 GMT</lastBuildDate>
<item>
  <title>Managing Hanging R Code</title>
  <dc:creator>Robert J.Bischoff</dc:creator>
  <link>https://bischrob.github.io/posts/Managing-Hanging-R-Code/post.html</link>
  <description><![CDATA[ 





<p>I came across an intriguing/frustrating problem while conducting network analysis in R. The basic problem was that my code was hanging and I could find no way to completely avoid it. This post describes how I was able to solve the problem. Before continuing, I want to note that typically hanging code is a user error or sign of a bug, and it is best to solve the problem rather than brute force a solution. However, in some cases, you may need to run code that could hang and you want to stop it after a certain amount of time. This post describes how to do that.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Managing-Hanging-R-Code/HangingCode.png" class="img-fluid figure-img"></p>
<figcaption>Hanging Code</figcaption>
</figure>
</div>
<p>I wanted to run an Exponential Random Graph Model (ERGM) on a list of graphs. The problem was that the <em>ergm</em> function would hang on some graphs, and I couldn’t find a way to stop the code from running other than manually terminating it. This wouldn’t be a huge problem, if I wasn’t running the code for several thousand graphs. My first thought was to try a different package or maybe even do it in Python, but it turns out this is the only package that can calculate an ERGM and it isn’t available in Python. I also discovered that it was a known issue that the <em>ergm</em> function can hang under certain conditions.</p>
<p>The solution to the problem is found in the <em>callr</em> package. This package allows the user to create background R processes that can be supervised. The length of the background process can be monitored and it can be terminated if it exceeds that time frame. This solved my problem and saved me from manually running the code for each graph.</p>
<p>Below is example code demonstrating my process.</p>
<p>First, we’ll create a list of example graphs. We can create a graph like this.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1010</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(statnet)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: tergm</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ergm</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: network</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'network' 1.18.2 (2023-12-04), part of the Statnet Project
* 'news(package="network")' for changes since last version
* 'citation("network")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'ergm' 4.6.0 (2023-12-17), part of the Statnet Project
* 'news(package="ergm")' for changes since last version
* 'citation("ergm")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>'ergm' 4 is a major update that introduces some backwards-incompatible
changes. Please type 'news(package="ergm")' for a list of major
changes.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: networkDynamic</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'networkDynamic' 0.11.4 (2023-12-10?), part of the Statnet Project
* 'news(package="networkDynamic")' for changes since last version
* 'citation("networkDynamic")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Registered S3 method overwritten by 'tergm':
  method                   from
  simulate_formula.network ergm</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'tergm' 4.2.0 (2023-05-30), part of the Statnet Project
* 'news(package="tergm")' for changes since last version
* 'citation("tergm")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'tergm'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:ergm':

    snctrl</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: ergm.count</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'ergm.count' 4.1.2 (2024-06-15), part of the Statnet Project
* 'news(package="ergm.count")' for changes since last version
* 'citation("ergm.count")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: sna</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: statnet.common</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
Attaching package: 'statnet.common'</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following object is masked from 'package:ergm':

    snctrl</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>The following objects are masked from 'package:base':

    attr, order</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>sna: Tools for Social Network Analysis
Version 2.7-2 created on 2023-12-05.
copyright (c) 2005, Carter T. Butts, University of California-Irvine
 For citation information, type citation("sna").
 Type help(package="sna") to get started.</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>Loading required package: tsna</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>
'statnet' 2019.6 (2019-06-13), part of the Statnet Project
* 'news(package="statnet")' for changes since last version
* 'citation("statnet")' for citation information
* 'https://statnet.org' for help, support, and other information</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>unable to reach CRAN</code></pre>
</div>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1">g <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgraph</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tprob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>))</span>
<span id="cb25-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(g)</span></code></pre></div>
<div class="cell-output-display">
<div>
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Managing-Hanging-R-Code/post_files/figure-html/unnamed-chunk-1-1.png" class="img-fluid figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>We’ll use the <em>lapply</em> function to make a list of graphs.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb26-1">graphs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">network</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgraph</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">tprob =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)))</span>
<span id="cb26-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(graphs) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> letters[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
</div>
<p>Now we have graphs we can use with the <em>ergm</em> function. For simplicity, we’ll use a for loop to calculate the ergm for each graph. I’ve commented out the below code, because it will hang the R session.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # don't run</span></span>
<span id="cb27-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for (graph in graphs){</span></span>
<span id="cb27-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#   ergm(graph ~ edges + triangles)</span></span>
<span id="cb27-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># }</span></span></code></pre></div>
</div>
<p>How do we handle this? Error handling like <em>try</em> or <em>tryCatch</em> won’t work because the R session is hanging not providing an error. What I want to do is stop the code from running if it takes longer than a certain time. We can do this by running the code in a background process. We can use the <em>r_bg()</em> function from the <em>callr</em> package. We can specify the time limit for the process to run. If the process takes longer than the time limit, the process will be killed.</p>
<p>To do this, we’ll need to create a function to supervise the background process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb28-1">run_and_monitor_processes <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(bg, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">timeout =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>) {</span>
<span id="cb28-2">  start_times <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>()</span>
<span id="cb28-3">  </span>
<span id="cb28-4">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Monitor processes</span></span>
<span id="cb28-5">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> (<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) {</span>
<span id="cb28-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.sleep</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check every second</span></span>
<span id="cb28-7">    </span>
<span id="cb28-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the status of each process</span></span>
<span id="cb28-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(bg)) {</span>
<span id="cb28-10">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (bg[[name]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_alive</span>()) {</span>
<span id="cb28-11">        run_time <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.numeric</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">difftime</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Sys.time</span>(), start_times, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">units =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secs"</span>))</span>
<span id="cb28-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (shiny<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">isTruthy</span>(run_time <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> timeout)) {</span>
<span id="cb28-13">          bg[[name]]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kill</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Kill process if it exceeds timeout</span></span>
<span id="cb28-14">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cat</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Process"</span>, name, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"killed after"</span>, run_time, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"seconds</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb28-15">        }</span>
<span id="cb28-16">      }</span>
<span id="cb28-17">    }</span>
<span id="cb28-18">    </span>
<span id="cb28-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exit the loop if all processes are done</span></span>
<span id="cb28-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">all</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(bg, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(p) p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is_alive</span>()))) {</span>
<span id="cb28-21">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">break</span></span>
<span id="cb28-22">    }</span>
<span id="cb28-23">  }</span>
<span id="cb28-24">}</span></code></pre></div>
</div>
<p>This function checks how long a process has been running and kills it if it exceeds the specified timeout. Once all processes are done, the function exits.</p>
<p>We also need to create a function to run the ERGM so we can pass in the arguments and load the <em>statnet</em> package. We are creating a separate background process that does not have access to the global environment. Results can be obtained from the background process using the <em>get_result()</em> function, but I find it safer when running longer code to just write the results to a file. This way the results are saved even if R crashes or something else interrupts the code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb29-1">tmp_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tempdir</span>()</span>
<span id="cb29-2">run_ergm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(graph, dir, i){</span>
<span id="cb29-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(statnet)</span>
<span id="cb29-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ergm</span>(graph <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> edges <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> triangles)</span>
<span id="cb29-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeLines</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">file.path</span>(dir, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"done-"</span>,i,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">".txt"</span>)))</span>
<span id="cb29-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Done"</span>)</span>
<span id="cb29-7">}</span></code></pre></div>
</div>
<p>Now we can run our <em>run_ergm</em> function for each graph without the process hanging. An additional advantage is that we are running the code in parallel, which can speed up the process.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb30-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(callr)</span>
<span id="cb30-2">bg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a global list to store the background processes</span></span>
<span id="cb30-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(graphs)){</span>
<span id="cb30-4">  graph <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> graphs[[i]]</span>
<span id="cb30-5">  nm <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">names</span>(graphs)[i]</span>
<span id="cb30-6">  bg[[nm]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">r_bg</span>(run_ergm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">args =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">graph =</span> graph, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">dir =</span> tmp_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">i =</span> i))</span>
<span id="cb30-7">}</span>
<span id="cb30-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run_and_monitor_processes</span>(bg)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Process b killed after 15.21355 seconds
Process h killed after 15.28757 seconds
Process i killed after 15.34911 seconds
Process j killed after 15.42225 seconds</code></pre>
</div>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get results</span></span>
<span id="cb32-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(bg, <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(p) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tryCatch</span>(p<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">get_result</span>(),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">error =</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(e) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>     a      b      c      d      e      f      g      h      i      j 
"Done"     NA "Done" "Done" "Done" "Done" "Done"     NA     NA     NA </code></pre>
</div>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># view saved results</span></span>
<span id="cb34-2">ls <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(tmp_dir, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"done"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb34-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sapply</span>(ls,readLines))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-1.txt 
                                                          "Done" 
C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-3.txt 
                                                          "Done" 
C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-4.txt 
                                                          "Done" 
C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-5.txt 
                                                          "Done" 
C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-6.txt 
                                                          "Done" 
C:\\Users\\rjbischo\\AppData\\Local\\Temp\\Rtmp6dGUPg/done-7.txt 
                                                          "Done" </code></pre>
</div>
</div>
<p>The results show that the code was able to run the ERGM for each graph without hanging, although we did not get results for two of the graphs because they timed out. Obviously, in a real use case we would want to return real results, but this simple example should allow you to adapt your code to solve hanging code problems.</p>



 ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://bischrob.github.io/posts/Managing-Hanging-R-Code/post.html</guid>
  <pubDate>Tue, 23 Jul 2024 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Automated NetLogo Flowcharts in R</title>
  <dc:creator>Robert J.Bischoff</dc:creator>
  <link>https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/post.html</link>
  <description><![CDATA[ 





<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/flowChart.svg" class="img-fluid figure-img"></p>
<figcaption>Flow chart</figcaption>
</figure>
</div>
<section id="netlogo" class="level2">
<h2 class="anchored" data-anchor-id="netlogo">NetLogo</h2>
<p>NetLogo is a popular tool for building agent based models. A helpful group has built a nice R package for interfacing with NetLogo called <a href="https://docs.ropensci.org/nlrx/reference/nlrx-package.html">NLRX</a>. One of the functions that is really fun to play with is the <em>nldoc_network</em> function. It builds an igraph object using the NetLogo code that graphs the procedure calls in the model.</p>
<p>We’ll use the Bacterial Infection model as an example.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/Bacterial Infection.png" class="img-fluid figure-img"></p>
<figcaption>Bacterial Infection</figcaption>
</figure>
</div>
<p>We need to first find the directory it is in. This will vary by operating system and version. Then we can call the function and get an igraph network.</p>
<pre><code>library(nlrx, quietly = T, warn.conflicts = F)
dir = "C:\\Program Files\\NetLogo 6.2.2\\app\\models\\Sample Models\\Biology\\Evolution"
model = file.path(dir,"Bacterial Infection.nlogo")
nw = nldoc_network(model)
nw</code></pre>
<p>We can plot it with igraph.</p>
<pre><code>plot(nw)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/igraphPlot.png" class="img-fluid figure-img"></p>
<figcaption>igraph plot</figcaption>
</figure>
</div>
</section>
<section id="flowcharts" class="level1">
<h1>Flowcharts</h1>
<p>Typically, we don’t present a graph like this when we’re writing about our models. We need something like a flowchart. A flowchart is a kind of graph, but it has a bit more structure. How can we turn this graph into a flowchart?</p>
<p>The <a href="https://rich-iannone.github.io/DiagrammeR/index.html">diagrammeR</a> package has all of the necessary tools, but the syntax has to be written out in a form like this:</p>
<pre><code>library(DiagrammeR, quietly = T, warn.conflicts = F)
grViz("
digraph boxes_and_circles {

  # a 'graph' statement
  graph [overlap = true, fontsize = 10]

  # several 'node' statements
  node [shape = box,
        fontname = Helvetica]
  A; B; C; D;

  node [shape = circle,
        fixedsize = true,
        width = 0.9] // sets as circles
  1; 2; 3;

  # several 'edge' statements
  A-&gt;1 B-&gt;2 B-&gt;3 C-&gt;A
  1-&gt;D C-&gt;B
}
")</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/flowChart1.png" class="img-fluid figure-img" width="300"></p>
<figcaption>flow chart 1</figcaption>
</figure>
</div>
<p>Writing it out like this kind of kills the fun in automatically building our flowchart from the code. But really this is just a character string, so we can paste or glue together what we need without having to type it out.</p>
<p>We can extract a dataframe from our igraph object easily enough. Note: in this model the procedure names use a hyphen, which is common in NetLogo (although I don’t recommend it). The hyphen is a special character in GraphViz (the underlying software we are using in diagrammeR), so we will just remove it.</p>
<pre><code>library(igraph, quietly = T, warn.conflicts = F)
library(dplyr, quietly = T, warn.conflicts = F)
library(stringr, quietly = T, warn.conflicts = F)
edges = igraph::as_data_frame(nw) %&gt;% 
  mutate_all(str_remove_all,pattern = "-")
nodes = V(nw)$name %&gt;% str_remove_all("-")</code></pre>
<p>We will then use a combination of paste and map (the glue package caused a conflict with the github pages build on my website) to format our edges and nodes into the proper shape.</p>
<pre><code>library(purrr, quietly = T, warn.conflicts = F)
diagram = paste("
  digraph {
      graph []
      
      node []
  ",paste(nodes,collapse = '; '),"
      
  ",paste(map2_chr(edges$from,edges$to,function(x,y)paste0(c(x,y), collapse = '-&gt;')),collapse = ' '),"
      }"
)
grViz(diagram)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/flowChart2.png" class="img-fluid figure-img"></p>
<figcaption>flow chart 2</figcaption>
</figure>
</div>
<p>Already this looks like a much better graph visualization than what we had before.</p>
<p>But we can always tweak it and make some improvements. How about adding some color, changing the font, and changing the ellipses to boxes?</p>
<pre><code>diagram = paste(
  "
  digraph {
      graph [fontsize = 10, fontname = Helvetica]
      
      node [shape = box, fillcolor = Beige, style = filled]
  ",paste(nodes,collapse = '; '),"
      
  ",paste(map2_chr(edges$from,edges$to,function(x,y)paste0(c(x,y), collapse = '-&gt;')),collapse = ' '),"
      }"
)
grViz(diagram)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/flowChart3.png" class="img-fluid figure-img"></p>
<figcaption>flow chart 3</figcaption>
</figure>
</div>
<p>The last change we might want to make is to highlight certain nodes. Let’s make it simple and just highlight setup and go. These two nodes are the only procedures directly called by the user, so let’s make them stand out. Let’s also make the arrows straight.</p>
<pre><code>diagram = paste(
  "
  digraph {
      graph [fontsize = 10, fontname = Helvetica, splines = ortho]
      
      node [shape = triangle, fillcolor = Honeydew, style = filled]
    go; setup
      
      node [shape = box, fillcolor = Beige, style = filled]
  ",paste(nodes[which(!nodes %in% c('go','setup'))],collapse = '; '),"
      
  ",paste(map2_chr(edges$from,edges$to,function(x,y)paste0(c(x,y), collapse = '-&gt;')),collapse = ' '),"
      }"
)
grViz(diagram)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/flowChart4.png" class="img-fluid figure-img"></p>
<figcaption>flow chart 4</figcaption>
</figure>
</div>
<p>And that is a much improved flowchart from the initial igraph plot and this code is easily adaptable to any NetLogo model. There are a lot of options that you can use to customize the flowchart even further, but we still need to save the flowchart. We can use the <a href="https://github.com/rich-iannone/DiagrammeRsvg">DiagrammeRsvg</a> for that and save to file or save as a png using the <a href="https://docs.ropensci.org/magick/articles/intro.html">magick</a> package as well.</p>
<pre><code>library(DiagrammeRsvg, quietly = T, warn.conflicts = F)
grViz(diagram) %&gt;% export_svg() %&gt;% writeLines(con = "flowChart.svg")
library(magick, quietly = T, warn.conflicts = F)
grViz(diagram) %&gt;% export_svg() %&gt;% image_read_svg() %&gt;% image_write("flowChart.png")</code></pre>
<p>And there you have an automatically generated flowchart, and for most NetLogo models all you would have to do is change the file name and path.</p>


</section>

 ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://bischrob.github.io/posts/Automated-Netlogo_Flowcharts_in_R/post.html</guid>
  <pubDate>Thu, 08 Dec 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>UseR Conference Shiny Presentation</title>
  <dc:creator>Robert J.Bischoff</dc:creator>
  <link>https://bischrob.github.io/posts/UseR-Conference-Shiny-Presentation/post.html</link>
  <description><![CDATA[ 





<p>Today I had the opportunity to present the work I’ve done with Dan Hruschka on the CatMapper application in the virtual UseR conference. The app was built using R shiny and Neo4j.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/UseR-Conference-Shiny-Presentation/CatMapperWalkThrough.gif" class="img-fluid figure-img"></p>
<figcaption>CatMapper walk-through</figcaption>
</figure>
</div>
<p>You can download the powerpoint <a href="../..\data/Slides/CatMapperShinyApplication.pptx">here</a></p>



 ]]></description>
  <category>presentation</category>
  <category>R</category>
  <guid>https://bischrob.github.io/posts/UseR-Conference-Shiny-Presentation/post.html</guid>
  <pubDate>Tue, 21 Jun 2022 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Why I like R — web scraping and the NBA playoffs</title>
  <dc:creator>Robert J.Bischoff</dc:creator>
  <link>https://bischrob.github.io/posts/why-I-like-R/post.html</link>
  <description><![CDATA[ 





<p>Learning <a href="https://www.r-project.org/"><strong><em>R</em></strong></a> has been fun for a number of reasons for me. One is simply that I find programming fun. It’s like solving puzzles for me. Sure there’s a lot of frustration involved, but I find it worthwhile. R has been fun because I love numbers and it’s designed for statistics. Another passion is efficiency. I don’t like to do things by hand if I have to, and I love to automate things. Today I wanted to demonstrate some of the possibilities R has to offer. Instead of something archaeology related, I’ll talk about another passion of mine–sports.</p>
<p>The NBA playoffs are about to start and my beloved Utah Jazz are racing for the number one seed. I frequently check <a href="https://projects.fivethirtyeight.com/2021-nba-predictions/">fivethirtyeight’s</a> and <a href="https://www.espn.com/nba/story/_/page/BPI-Playoff-Odds/espn-nba-basketball-power-index-playoff-odds">ESPN’s</a> playoff predictions. These are great, but they don’t show the odds of ending up in a particular playoff spot. I decided to sit down and see if I could calculate the odds before the game against Golden State ended tonight.</p>
<p>If you’re not interested in the code, then skip to the end, and I’ll tell you the numbers. This isn’t an introduction to R, it’s more me showing some of the capabilities of R. The great thing is, you can adapt this code to see the odds your team hits a certain number of wins.</p>
<p>First I love the tidyverse, which is a collection of packages that make R easier to use and understand. I also like some of the features of the magrittr package that aren’t loaded with the tidyverse packages. Rvest is a package to scrape the web, and lubridate is a great package for working with dates.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span></code></pre></div>
<pre><code>## -- Attaching packages --------------------------------------- tidyverse 1.3.0 --</code></pre>
<pre><code>## v ggplot2 3.3.3     v purrr   0.3.4
## v tibble  3.1.0     v dplyr   1.0.5
## v tidyr   1.1.3     v stringr 1.4.0
## v readr   1.4.0     v forcats 0.5.1</code></pre>
<pre><code>## -- Conflicts ------------------------------------------ tidyverse_conflicts() --
## x tidyr::extract()   masks magrittr::extract()
## x dplyr::filter()    masks stats::filter()
## x dplyr::lag()       masks stats::lag()
## x purrr::set_names() masks magrittr::set_names()</code></pre>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(rvest)</span></code></pre></div>
<pre><code>## 
## Attaching package: 'rvest'</code></pre>
<pre><code>## The following object is masked from 'package:readr':
## 
##     guess_encoding</code></pre>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(lubridate)</span></code></pre></div>
<pre><code>## 
## Attaching package: 'lubridate'</code></pre>
<pre><code>## The following objects are masked from 'package:base':
## 
##     date, intersect, setdiff, union</code></pre>
<p>I decided to use ESPN’s BPI game odds. These are adjusted with lots of variables and are decently accurate.</p>
<p>First, I grabbed the Utah Jazz schedule.</p>
<p>There’s only one table on the page so it wasn’t hard to access, but I did have to clean up the data a little bit due to a postponed game and an extra header row. I originally filtered those values here, but I needed the original values for the next section.</p>
<p>Next, I had to get the links to each remaining game so I could pull the odds of winning.</p>
<p>The <code>%&lt;&gt;%</code> function is one of my favorites as it takes whatever is on the left, uses it in the function to the right and also assigns the result of the function back to that variable. Thus I can save the typing for <code>schedule = schedule %&gt;%</code> and it makes it easy to test code before saving it to a variable by just using <code>%&gt;%</code> for the test and then adding in the last <code>&lt;</code> symbol once I have it right.</p>
<p>I won’t describe what <strong><em>xpaths</em></strong> are in detail, but they can be used to identify specific elements on a page. The table rows match up to the <code>xpath</code> so I can get all of the links to the individual games by just changing what is essentially the row number. This was easier to do before the game started, but afterwards the link disappeared, so I had to find a workaround that works more consistently.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.espn.com/nba/team/schedule/_/name/utah"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>()</span>
<span id="cb11-3"></span>
<span id="cb11-4">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_node</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header =</span> T)</span>
<span id="cb11-7"></span>
<span id="cb11-8">gameIDs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(schedule),<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb11-9">  xpath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'//*[@id="fittPageContainer"]/div[2]/div[5]/div/div/section/div/section/section/div/div/div/div[2]/table/tbody/tr['</span>,.x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']/td[3]/span/a'</span>)</span>
<span id="cb11-10">url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-11">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_elements</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xpath =</span> xpath) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span>)</span>
<span id="cb11-13">})</span>
<span id="cb11-14">schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span></span>
<span id="cb11-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gameID =</span> gameIDs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb11-16">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATE'</span>,RESULT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Postponed'</span>)</span></code></pre></div>
<p>Next, I identified the remaining games. There are a few ways to do this, but I decided to get complicated and convert the date in the schedule table to a real date so I could filter for games today and later. It might be better to just filter for games that are not completed, but this way shows how R can be used for time series.</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(DATE),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>.x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-3">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^.*?,"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb12-4">                              trimws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-5">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_date_time</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Om d"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DATE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(DATE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(DATE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>),</span>
<span id="cb12-7">                          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(DATE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>)))</span>
<span id="cb12-8"></span>
<span id="cb12-9">remaining <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>())</span></code></pre></div>
<p>Next, I used a <strong><em>purrr map</em></strong> function to go through each game link and get the odds of winning for the home team. I then calculated the Jazz odds of winning by determining who was the home team and inverting the odds if necessary. Because I ran this during a game the game link was missing so I used the invalidate function from <strong><em>gtools</em></strong> to add in the odds for tonight. I haven’t used this function much but it seems a good catchall for values that are problematic (e.g., null,NA, or empty values).</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">remaining <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">HomePred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(gameID,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb13-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(gtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invalid</span>(.x)){</span>
<span id="cb13-4">      result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'49%'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this was the odds pregame for Jazz vs Warriors</span></span>
<span id="cb13-5">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb13-6">    xpath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<span id="cb13-7">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'//*[@id="gamepackage-predictor"]/div/div/div[1]/div[1]/div/div/span[1]'</span></span>
<span id="cb13-8">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_node</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xpath =</span> xpath) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_text</span>()</span>
<span id="cb13-9">    }</span>
<span id="cb13-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb13-11">  })) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(HomePred),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>.x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-13">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb13-14">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.double</span>())) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WinPer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(OPPONENT,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HomePred)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb13-16">                            <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>HomePred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span></code></pre></div>
<p>Last, I created a function to simulate the remaining wins using 1 as a win and zero as a loss and replicated that function 10,000 times. The simulation went fairly quickly on my computer, and I used the nice and simple <strong><em>tictoc</em></strong> package to show the time elapsed.</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">predictWins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> remaining<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>WinPer){</span>
<span id="cb14-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(probs,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb14-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> T,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> sum</span>
<span id="cb14-4">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> sum</span>
<span id="cb14-5">}</span>
<span id="cb14-6"></span>
<span id="cb14-7">tictoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb14-8">sims <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predictWins</span>(remaining<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>WinPer))</span>
<span id="cb14-9">tictoc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span></code></pre></div>
<pre><code>## 1.14 sec elapsed</code></pre>
<p>With these results I could look at the odds Utah wins its remaining games.</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prop.table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(sims))</span></code></pre></div>
<pre><code>## sims
##      0      1      2      3      4 
## 0.0085 0.0873 0.2913 0.4208 0.1921</code></pre>
<p>The Phoenix Suns are closing in on the Jazz. I could run the above code again but substituting the Phoenix Suns schedule url for the Jazz url. As a general rule, copying and pasting code is a bad idea. If I have to fix something in the code, then I have to fix it in multiple places. Instead I can turn everything I did into a function.</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">predictRemaining <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(team){</span>
<span id="cb18-2">  </span>
<span id="cb18-3">url <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> glue<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.espn.com/nba/team/schedule/_/name/{team}"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-4">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>()</span>
<span id="cb18-5"></span>
<span id="cb18-6">schedule <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_node</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"table"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_table</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">header =</span> T)</span>
<span id="cb18-9"></span>
<span id="cb18-10">gameIDs <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nrow</span>(schedule),<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb18-11">  xpath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">paste0</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'//*[@id="fittPageContainer"]/div[2]/div[5]/div/div/section/div/section/section/div/div/div/div[2]/table/tbody/tr['</span>,.x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">']/td[3]/span/a'</span>)</span>
<span id="cb18-12">url <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_elements</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xpath =</span> xpath) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-14">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_attr</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"href"</span>)</span>
<span id="cb18-15">})</span>
<span id="cb18-16">schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span></span>
<span id="cb18-17">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">gameID =</span> gameIDs) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-18">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DATE'</span>,RESULT <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Postponed'</span>)</span>
<span id="cb18-19"></span>
<span id="cb18-20">schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> </span>
<span id="cb18-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(DATE),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>.x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-22">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_remove_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^.*?,"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-23">                              trimws <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-24">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse_date_time</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Om d"</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">DATE =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">month</span>(DATE) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(DATE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2020</span>),</span>
<span id="cb18-26">                          <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">year&lt;-</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">`</span>(DATE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2021</span>)))</span>
<span id="cb18-27"></span>
<span id="cb18-28">remaining <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> schedule <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(DATE <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">today</span>())</span>
<span id="cb18-30"></span>
<span id="cb18-31">remaining <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> </span>
<span id="cb18-32">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">HomePred =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_chr</span>(gameID,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb18-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(gtools<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">invalid</span>(.x)){</span>
<span id="cb18-34">      result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'49%'</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this was the odds pregame for Jazz vs Warriors</span></span>
<span id="cb18-35">    } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb18-36">    xpath <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> </span>
<span id="cb18-37">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'//*[@id="gamepackage-predictor"]/div/div/div[1]/div[1]/div/div/span[1]'</span></span>
<span id="cb18-38">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> .x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">read_html</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_node</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xpath =</span> xpath) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">html_text</span>()</span>
<span id="cb18-39">    }</span>
<span id="cb18-40">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb18-41">  })) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-42">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate_at</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vars</span>(HomePred),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>.x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-43">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sub</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>,.) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb18-44">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as.double</span>())) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">WinPer =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(OPPONENT,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"@"</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>HomePred)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>,</span>
<span id="cb18-46">                            <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>HomePred<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>))</span>
<span id="cb18-47"></span>
<span id="cb18-48">predictWins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">probs =</span> remaining<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>WinPer){</span>
<span id="cb18-49">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_int</span>(probs,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span>{</span>
<span id="cb18-50">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sample</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">replace =</span> T,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">prob =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(.x,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>.x)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> sum</span>
<span id="cb18-51">  }) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> sum</span>
<span id="cb18-52">}</span>
<span id="cb18-53"></span>
<span id="cb18-54">sims <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">replicate</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>,<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predictWins</span>(remaining<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>WinPer))</span>
<span id="cb18-55">  </span>
<span id="cb18-56">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">schedule =</span> schedule, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">remaining =</span> remaining, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sims =</span> sims))</span>
<span id="cb18-57">}</span></code></pre></div>
<p>With this function I can simplify the code and compare the results.</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">utah <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predictRemaining</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"utah"</span>)</span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">startsWith</span>(utah<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>schedule<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RESULT,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"W"</span>))</span></code></pre></div>
<pre><code>## [1] 50</code></pre>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prop.table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(utah<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sims))</span></code></pre></div>
<pre><code>## 
##      0      1      2      3      4 
## 0.0087 0.0856 0.3047 0.4127 0.1883</code></pre>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">phoenix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">predictRemaining</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"phoenix"</span>)</span>
<span id="cb23-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">startsWith</span>(phoenix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>schedule<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>RESULT,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"W"</span>))</span></code></pre></div>
<pre><code>## [1] 48</code></pre>
<div class="sourceCode" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb25-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">prop.table</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">table</span>(phoenix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sims))</span></code></pre></div>
<pre><code>## 
##      0      1      2      3      4 
## 0.0094 0.0984 0.3198 0.4024 0.1700</code></pre>
<p>If Utah wins zero more games then the Suns have a 0.89 chance of getting the one seed.</p>
<p>If Utah wins one more game then the Suns have a 0.57 chance of getting the one seed.</p>
<p>If Utah wins two more games then the Suns have a 0.17 chance of getting the one seed.</p>
<p>The odds of Utah winning two or more games is 0.91 chance of getting the one seed.</p>
<p>I can calculate the total odds of the Jazz getting the number one seed like by adding two to the Jazz total as that is the current lead. The Suns have the tiebreaker though.</p>
<div class="sourceCode" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb27-1">adj <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> utah<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sims <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb27-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(phoenix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sims <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> adj) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(phoenix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>sims),<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<pre><code>## [1] 0.89</code></pre>
<p>The result is that the Utah Jazz have a 0.89 chance of getting the number one seed. This is pretty close to what I found <a href="https://www.deseret.com/2021/5/10/22429307/what-do-the-utah-jazz-have-left-to-do-to-get-the-no-1-seed-in-the-western-conference-nba-playoffs">elsewhere</a> and good news personally.</p>
<p>The great thing is I can rerun this code whenever I want and it should work. Of course, that doesn’t always work as intended but at least I learn some new skills every time I encounter a problem. I’ve used R for a few years now, but I still visited eleven different stack overflow questions just to write this.</p>



 ]]></description>
  <category>tutorial</category>
  <category>sports</category>
  <category>R</category>
  <guid>https://bischrob.github.io/posts/why-I-like-R/post.html</guid>
  <pubDate>Sat, 08 May 2021 07:00:00 GMT</pubDate>
</item>
<item>
  <title>Making Image Mosaics in R</title>
  <dc:creator>Robert J.Bischoff</dc:creator>
  <link>https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/post.html</link>
  <description><![CDATA[ 





<p>I had the idea to make my dad an image mosaic of his grandkids for Father’s day. My immediate thought was to check if R had a package for that–and it does. The <code>RsimMosaic</code> package is a great tool for making image mosaics. Combined with the <code>magick</code> package, I have all the tools I need. While I think the picture of my dad turned out great, I decided to make an archaeology related mosaic for this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/PuebloBonitoMosaicSmall.jpg" class="img-fluid figure-img"></p>
<figcaption>Mosaic Small</figcaption>
</figure>
</div>
<p>The first step was to gather the photos. The more photos the better. My wife and I use Google Photos to store all of our pictures, so I searched the term <em>archaeology</em> within my photo account and used Google’s AI to make my life easier. I downloaded more than 1,000 photographs that matched this term. Not every picture was archaeology related, but it did a fairly good job. I only removed a few pictures that didn’t fit.</p>
<p>I also use <code>tidyverse</code> which is standard for me and <code>magrittr</code>, as I like some of the pipes not included in <code>tidyverse</code>. The <code>tictoc</code> package is a great little package for keeping track of elapsed time. Base R can take care of a lot of the functions in these packages, but I find them more convenient and easier to follow. The magick package sometimes has a problem with memory management when communicating with imagemagick, but the development version of the package has an <code>image_destroy</code> function that helps.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># libraries used</span></span>
<span id="cb1-2">remotes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">install_github</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ropensci/magick'</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(RsimMosaic)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magrittr)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(magick)</span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tictoc)</span></code></pre></div>
<p>As my photos were zipped, I used R to unzip them (why not use R for everything, right?). I use the <code>walk</code> function from <code>purrr</code> as it doesn’t return any results. I have the photos stored in a subdirectory called <em>Photos</em>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># photos are zipped; list files and unzip them</span></span>
<span id="cb2-2">lfZip <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Photos"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'zip'</span>)</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use walk from purrr to unzip folders</span></span>
<span id="cb2-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(lfZip, unzip, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">exdir =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photos'</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># list all photos</span></span>
<span id="cb2-8">lf <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list.files</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Photos"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jpg'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">full.names =</span> T)</span></code></pre></div>
<p>The biggest problem with the image mosaic is that all of the images have to be square. I don’t know about you, but I don’t take many square photos. <code>RsimMosaic</code> does have a <code>createTiles</code> function, but as the help file notes, the interpolation scheme does not produce high quality images. I wrote my own function to generate square tiles and again I used <code>walk</code> to save the results. The function crops photos in the middle, depending on whether it is a landscape or portrait orientation.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create new directory to save results</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dir.create</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tiles'</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># function to create square tiles</span></span>
<span id="cb3-5">squareTiles <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(.x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">size =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>){</span>
<span id="cb3-6">  img <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_read</span>(.x)</span>
<span id="cb3-7">  info <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> img <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> image_info</span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>width <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> info<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>height){</span>
<span id="cb3-9">    img <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_scale</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x{size}'</span>))</span>
<span id="cb3-10">    img <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_crop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(</span>
<span id="cb3-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{size}x{size}+{(image_info(img)$width - {size}) / 2}+0'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_write</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(.x,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photos'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tiles'</span>))</span>
<span id="cb3-14">  } <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> {</span>
<span id="cb3-15">    img <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&lt;&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_scale</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{size}'</span>))</span>
<span id="cb3-16">    img <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-17">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_crop</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(</span>
<span id="cb3-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{size}x{size}+0+{(image_info(img)$height - {size}) / 2}'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb3-19">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_write</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(.x,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photos'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Tiles'</span>))</span>
<span id="cb3-20">  }</span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_destroy</span>(img) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prevent memory problems</span></span>
<span id="cb3-22">}</span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># run function</span></span>
<span id="cb3-25"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb3-26"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">walk</span>(lf, squareTiles)</span>
<span id="cb3-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4837.13 sec elapsed</span></span></code></pre></div>
<p>It took my computer 4837 seconds (<code>r round(4837 / 60,2)</code> hours) to run for all 1,486 pictures. Maybe I downloaded too many, but this is going to be a lengthy process.</p>
<p>Here’s a comparison of two 60-pixel images, the first is from the <code>createTiles</code> function, and the second is from the custom function. <code>Magick</code> is the clear winner.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">createTiles</th>
<th style="text-align: center;">magick</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/createTiles.jpg" height="180"></td>
<td style="text-align: center;"><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/magick.jpg" height="180"></td>
</tr>
</tbody>
</table>
<p>Once the tiles were ready, finally. I picked one of the photos, a picture of <a href="https://en.wikipedia.org/wiki/Pueblo_Bonito">Pueblo Bonito</a>, and converted it to a smaller size. Each pixel in the input image will be replaced by a 60-pixel tile, which means the resulting image is huge unless you use a very small pixel value. I’m going for big, but not too big.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/PuebloBonitoOriginal.jpg" class="img-fluid figure-img"></p>
<figcaption>Pueblo Bonito</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_read</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Photos/20171006_135349.jpg'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_scale</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'250'</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image_write</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PuebloBonito.jpg'</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the mosaic</span></span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tic</span>()</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">composeMosaicFromImageRandom</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PuebloBonito.jpg'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PuebloBonitoMosaic.jpg'</span>,</span>
<span id="cb4-7">                             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 'Tiles', removeTiles=FALSE)</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">toc</span>()</span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 93.66 sec elapsed</span></span></code></pre></div>
<p>Note in case you run across this: When I ran this function the first time it failed. I did some investigation and determined that a handful of photos were saved with an 8 bit depth and the other were 24 bit depth. As there were only a few, I just removed them and proceeded.</p>
<p>The result is cool if you zoom in, but doesn’t look all that great. A good way to improve the look is to overlay the original photo with a 50% opacity. I also wanted to increase the contrast. I do love Photoshop and it can easily be done that route, but I think I said something about doing it all in R, so here we go.</p>
<p>(Warning: the following images may take a long time to load)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/PuebloBonitoMosaic.jpg" class="img-fluid figure-img"></p>
<figcaption>Pueblo Bonito Mosaic</figcaption>
</figure>
</div>
<p>Increasing contrast is not difficult, but the opacity problem is more challenging. There is no native way in the <code>magick</code> package to change the background opacity, and because it is a jpg image, the color scheme is <em>rgb</em> when it needs to be <em>rgba</em>. The hack I used is to make all white pixels transparent on the original photo, which doesn’t really change the picture but does change it to <em>rgba</em>. I then modified the bitmap directly by multiplying it by 0.5. Then the images can be combined and saved to produce the final result.</p>
<pre><code>original &lt;- image_read('Photos/20171006_135349.jpg')
mosaic &lt;- image_read('PuebloBonitoMosaic.jpg') %&gt;%
  image_contrast() # increase contrast
inf &lt;- mosaic %&gt;% image_info
original %&lt;&gt;% image_scale(str_glue('{inf$width}x{inf$height}!')) %&gt;%
  image_transparent('white')
bitmap &lt;- original[[1]]
bitmap[4,,] &lt;- as.raw(as.integer(bitmap[4,,]) * 0.5)
original &lt;- image_read(bitmap)
original &lt;- c(mosaic, original) %&gt;% image_flatten()
image_write(original, 'PuebloBonitoMosaicMod.jpg', quality = 80)</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/PuebloBonitoMosaicMod.jpg" class="img-fluid figure-img"></p>
<figcaption>Pueblo Bonito Overlay</figcaption>
</figure>
</div>
<p>It’s not perfect, but there are a lot of ways to tweak it to improve the result. Changing the opacity, and pixel sizes will make the biggest difference. Let me know if you have any ideas on how to improve this code, and I hope you have some fun making mosaics of your dogs, cats, or whatever you love.</p>



 ]]></description>
  <category>R</category>
  <category>tutorial</category>
  <guid>https://bischrob.github.io/posts/Making-Image-Mosaics-in-R/post.html</guid>
  <pubDate>Tue, 30 Jun 2020 07:00:00 GMT</pubDate>
</item>
</channel>
</rss>
